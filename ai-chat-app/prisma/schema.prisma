generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique @db.VarChar(255)
  name          String    @db.VarChar(100)
  passwordHash  String    @map("password_hash") @db.VarChar(255)
  avatarUrl     String?   @map("avatar_url")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  lastLoginAt   DateTime? @map("last_login_at") @db.Timestamptz
  isActive      Boolean   @default(true) @map("is_active")

  conversations Conversation[]
  messages      Message[]
  settings      UserSetting?
  sessions      Session[]

  @@map("users")
}

model Conversation {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  title      String   @db.VarChar(200)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz
  isArchived Boolean  @default(false) @map("is_archived")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId])
  @@index([updatedAt(sort: Desc)])
  @@index([userId, updatedAt(sort: Desc)])
  @@map("conversations")
}

model Message {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String   @map("conversation_id") @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  content        String
  role           Role
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz
  tokenCount     Int?     @map("token_count")
  metadata       Json?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt(sort: Desc)])
  @@index([conversationId, createdAt(sort: Desc)])
  @@index([userId])
  @@map("messages")
}

model UserSetting {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String   @unique @map("user_id") @db.Uuid
  theme           Theme    @default(light)
  language        String   @default("ja") @db.VarChar(10)
  messageFontSize Int      @default(14) @map("message_font_size")
  autoSave        Boolean  @default(true) @map("auto_save")
  soundEnabled    Boolean  @default(true) @map("sound_enabled")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_settings")
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  tokenHash String   @map("token_hash") @db.VarChar(255)
  expiresAt DateTime @map("expires_at") @db.Timestamptz
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  ipAddress String?  @map("ip_address") @db.Inet
  userAgent String?  @map("user_agent")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@map("sessions")
}

enum Role {
  user
  assistant
  system
}

enum Theme {
  light
  dark
  auto
}
